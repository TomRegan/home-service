#! /bin/bash

function include {
    local fn=$1
    [[ -f $CCD/include/$fn ]] && {
        source $CCD/include/$fn && return
    }
    [[ -f $CCD/include/$fn.sh ]] && {
        source $CCD/include/$fn.sh && return
    }
    [[ -f $CCD/include/$fn.bash ]] && {
        source $CCD/include/$fn.bash && return
    }
}


# takes a file path and creates a lazy function to load that file
# the lazy function is unset after it is called
function load {
    local fn=$(basename ${1%.*})
    eval "function $fn { $(cat $CCD/libexec/${fn}.bash); unset -f $fn; $fn \$@; }"
}

function find_includes {
    echo ${CCD:-.}
    local includes=`find ${CCD:-.} -type f -path '*include*' ! -name '.*' ! -iname '*.md' | sort | sed -e 's/.\/\(.*\)\(\.bash\)/\1/' -e 's/\// /'`
    INCLUDES=$includes ${CCD:-.}/lib/filter ${CCD:-.}/home/-profile
}

function hash_code {
    local _s="$1"
    local -i h=0
    for ((i = 0; i < ${#_s}; i++)); do

        printf -v val "%d" "'${_s:$i:1}"

        if ((31 * h + val > 2147483647))
        then
            h=$((-2147483648 + (31 * h + val) % 2147483648 ))
        elif ((31 * h + val < -2147483648))
        then
            h=$(( 2147483648 - ( 31 * h + val) % 2147483648 )) 
        else
            h=$(( 31 * h + val))
        fi
    done
    printf "%d" $h
}
